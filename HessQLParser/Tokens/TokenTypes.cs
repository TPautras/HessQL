namespace HessQLParser;

public partial class Token 
{
    public enum TokenTypes
    {
        // Spéciaux
        UNKNOWN,
        END_OF_FILE,
        WHITESPACE,
        COMMENT_SINGLE_LINE,
        COMMENT_MULTI_LINE,

        // Identifiants et littéraux
        IDENTIFIER,
        QUOTED_IDENTIFIER,
        VARIABLE,
        GLOBAL_VARIABLE,
        INTEGER_LITERAL,
        REAL_LITERAL,
        STRING_LITERAL,
        BINARY_LITERAL,
        NULL_LITERAL,
        DATE_LITERAL,
        BOOLEAN_LITERAL,

        // Opérateurs arithmétiques
        PLUS,
        MINUS,
        ASTERISK,
        SLASH,
        PERCENT,
        EQUALS,
        NOT_EQUALS,
        GREATER_THAN,
        LESS_THAN,
        GREATER_THAN_OR_EQUAL,
        LESS_THAN_OR_EQUAL,
        DOUBLE_EQUALS,

        // Opérateurs logiques
        AND,
        OR,
        NOT,
        IN,
        BETWEEN,
        LIKE,
        IS,
        EXISTS,
        ALL,
        ANY,
        SOME,

        // Affectation et opérateurs composés
        ASSIGNMENT,
        ADD_EQUALS,
        SUBTRACT_EQUALS,
        MULTIPLY_EQUALS,
        DIVIDE_EQUALS,
        MODULO_EQUALS,
        BITWISE_AND_EQUALS,
        BITWISE_OR_EQUALS,
        BITWISE_XOR_EQUALS,

        // Opérateurs binaires
        BITWISE_AND,
        BITWISE_OR,
        BITWISE_XOR,
        BITWISE_NOT,
        SHIFT_LEFT,
        SHIFT_RIGHT,

        // Délimiteurs et ponctuation
        LEFT_PAREN,
        RIGHT_PAREN,
        LEFT_BRACKET,
        RIGHT_BRACKET,
        COMMA,
        DOT,
        SEMICOLON,
        COLON,
        DOUBLE_COLON,
        AT_SIGN,
        QUESTION_MARK,

        // Mots-clés de contrôle de flux
        BEGIN,
        END,
        IF,
        ELSE,
        WHILE,
        FOR,
        CONTINUE,
        BREAK,
        GOTO,
        RETURN,
        WAITFOR,
        THROW,
        TRY,
        CATCH,

        // Mots-clés DDL
        CREATE,
        ALTER,
        DROP,
        TRUNCATE,
        RENAME,

        // Mots-clés DML
        SELECT,
        INSERT,
        UPDATE,
        DELETE,
        MERGE,
        VALUES,
        INTO,
        OUTPUT,

        // Mots-clés transactionnels
        COMMIT,
        ROLLBACK,
        SAVE,
        TRANSACTION,
        BEGIN_TRANSACTION,

        // Clauses SQL
        FROM,
        WHERE,
        GROUP_BY,
        HAVING,
        ORDER_BY,
        TOP,
        LIMIT,
        OFFSET,
        DISTINCT,
        UNION,
        UNION_ALL,
        INTERSECT,
        EXCEPT,
        JOIN,
        INNER,
        LEFT,
        RIGHT,
        FULL,
        CROSS,
        ON,
        USING,
        AS,

        // Objets SQL
        TABLE,
        VIEW,
        INDEX,
        TRIGGER,
        PROCEDURE,
        FUNCTION,
        SCHEMA,
        DATABASE,
        COLUMN,
        CONSTRAINT,
        PRIMARY_KEY,
        FOREIGN_KEY,
        CHECK,
        DEFAULT,
        UNIQUE,

        // Autres mots-clés
        CASE,
        WHEN,
        THEN,
        ELSEIF,
        WITH,
        OPTION,
        RECONFIGURE,
        USE,
        SET,
        DECLARE,
        PRINT,
        EXEC,
        EXECUTE,
        OPEN,
        CLOSE,
        DEALLOCATE,
        CURSOR,
        FETCH,
        NEXT,
        INTO_CURSOR,
        GO,
        NOLOCK,

        // Types de données
        INT,
        BIGINT,
        SMALLINT,
        TINYINT,
        BIT,
        FLOAT,
        REAL,
        DECIMAL,
        NUMERIC,
        MONEY,
        SMALLMONEY,
        CHAR,
        NCHAR,
        VARCHAR,
        NVARCHAR,
        TEXT,
        NTEXT,
        BINARY,
        VARBINARY,
        IMAGE,
        DATE,
        TIME,
        DATETIME,
        SMALLDATETIME,
        DATETIME2,
        DATETIMEOFFSET,
        XML,
        GEOGRAPHY,
        GEOMETRY,
        HIERARCHYID,
        SQL_VARIANT,
        TIMESTAMP,
        ROWVERSION,
        UNIQUEIDENTIFIER,

        // XML & JSON
        FOR_XML,
        FOR_JSON,
        OPEN_JSON
    }
    
    public static readonly Dictionary<TokenTypes, string> TokenKindToStringMap = new()
    {
        { TokenTypes.UNKNOWN, "UNKNOWN" },
        { TokenTypes.END_OF_FILE, "END OF FILE" },
        { TokenTypes.WHITESPACE, "WHITESPACE" },
        { TokenTypes.COMMENT_SINGLE_LINE, "COMMENT SINGLE LINE" },
        { TokenTypes.COMMENT_MULTI_LINE, "COMMENT MULTI LINE" },
        { TokenTypes.IDENTIFIER, "IDENTIFIER" },
        { TokenTypes.QUOTED_IDENTIFIER, "QUOTED IDENTIFIER" },
        { TokenTypes.VARIABLE, "VARIABLE" },
        { TokenTypes.GLOBAL_VARIABLE, "GLOBAL VARIABLE" },
        { TokenTypes.INTEGER_LITERAL, "integer" },
        { TokenTypes.REAL_LITERAL, "real" },
        { TokenTypes.STRING_LITERAL, "string" },
        { TokenTypes.NULL_LITERAL, "null" },
        { TokenTypes.DATE_LITERAL, "date" },
        { TokenTypes.BOOLEAN_LITERAL, "boolean" },
        { TokenTypes.PLUS, "+" },
        { TokenTypes.MINUS, "-" },
        { TokenTypes.ASTERISK, "*" },
        { TokenTypes.SLASH, "/" },
        { TokenTypes.PERCENT, "%" },
        { TokenTypes.EQUALS, "=" },
        { TokenTypes.NOT_EQUALS, "!=" },
        { TokenTypes.GREATER_THAN, ">" },
        { TokenTypes.LESS_THAN, "<" },
        { TokenTypes.GREATER_THAN_OR_EQUAL, ">=" },
        { TokenTypes.LESS_THAN_OR_EQUAL, "<=" },
        { TokenTypes.DOUBLE_EQUALS, "DOUBLE EQUALS" },
        { TokenTypes.AND, "AND" },
        { TokenTypes.OR, "OR" },
        { TokenTypes.NOT, "NOT" },
        { TokenTypes.SELECT, "SELECT" },
        { TokenTypes.INSERT, "INSERT" },
        { TokenTypes.UPDATE, "UPDATE" },
        { TokenTypes.DELETE, "DELETE" },
        { TokenTypes.CREATE, "CREATE" },
        { TokenTypes.ALTER, "ALTER" },
        { TokenTypes.DROP, "DROP" },
        { TokenTypes.TRUNCATE, "TRUNCATE" },
        { TokenTypes.FROM, "FROM" },
        { TokenTypes.WHERE, "WHERE" },
        { TokenTypes.GROUP_BY, "GROUP BY" },
        { TokenTypes.ORDER_BY, "ORDER BY" },
        { TokenTypes.JOIN, "JOIN" },
        { TokenTypes.INNER, "INNER" },
        { TokenTypes.LEFT, "LEFT" },
        { TokenTypes.RIGHT, "RIGHT" },
        { TokenTypes.FULL, "FULL" },
        { TokenTypes.CROSS, "CROSS" },
        { TokenTypes.ON, "ON" },
        { TokenTypes.USING, "USING" },
        { TokenTypes.AS, "AS" },
        { TokenTypes.LIMIT, "LIMIT" },
        { TokenTypes.OFFSET, "OFFSET" },
        { TokenTypes.DISTINCT, "DISTINCT" },
        { TokenTypes.TABLE, "TABLE" },
        { TokenTypes.VIEW, "VIEW" },
        { TokenTypes.INDEX, "INDEX" },
        { TokenTypes.TRIGGER, "TRIGGER" },
        { TokenTypes.PROCEDURE, "PROCEDURE" },
        { TokenTypes.FUNCTION, "FUNCTION" },
        { TokenTypes.SCHEMA, "SCHEMA" },
        { TokenTypes.DATABASE, "DATABASE" },
        { TokenTypes.COLUMN, "COLUMN" },
        { TokenTypes.CONSTRAINT, "CONSTRAINT" },
        { TokenTypes.PRIMARY_KEY, "PRIMARY KEY" },
        { TokenTypes.FOREIGN_KEY, "FOREIGN KEY" },
        { TokenTypes.CHECK, "CHECK" },
        { TokenTypes.DEFAULT, "DEFAULT" },
        { TokenTypes.UNIQUE, "UNIQUE" },
        { TokenTypes.CASE, "CASE" },
        { TokenTypes.WHEN, "WHEN" },
        { TokenTypes.THEN, "THEN" },
        { TokenTypes.ELSE, "ELSE" },
        { TokenTypes.ELSEIF, "ELSEIF" },
        { TokenTypes.OPTION, "OPTION" },
        { TokenTypes.RECONFIGURE, "RECONFIGURE" },
        { TokenTypes.USE, "USE" },
        { TokenTypes.SET, "SET" },
        { TokenTypes.DECLARE, "DECLARE" },
        { TokenTypes.PRINT, "PRINT" },
        { TokenTypes.EXEC, "EXEC" },
        { TokenTypes.EXECUTE, "EXECUTE" },
        { TokenTypes.OPEN, "OPEN" },
        { TokenTypes.CLOSE, "CLOSE" },
        { TokenTypes.DEALLOCATE, "DEALLOCATE" },
        { TokenTypes.CURSOR, "CURSOR" },
        { TokenTypes.FETCH, "FETCH" },
        { TokenTypes.NEXT, "NEXT" },
        { TokenTypes.INTO_CURSOR, "INTO CURSOR" },
        { TokenTypes.GO, "GO" },
        { TokenTypes.NOLOCK, "NOLOCK" },
        { TokenTypes.INT, "INT" },
        { TokenTypes.BIGINT, "BIGINT" },
        { TokenTypes.SMALLINT, "SMALLINT" },
        { TokenTypes.TINYINT, "TINYINT" },
        { TokenTypes.FLOAT, "FLOAT" },
        { TokenTypes.DECIMAL, "DECIMAL" },
        { TokenTypes.NUMERIC, "NUMERIC" },
        { TokenTypes.MONEY, "MONEY" },
        { TokenTypes.SMALLMONEY, "SMALLMONEY" },
        { TokenTypes.CHAR, "CHAR" },
        { TokenTypes.NCHAR, "NCHAR" },
        { TokenTypes.TEXT, "TEXT" },
        { TokenTypes.NTEXT, "NTEXT" },
        { TokenTypes.VARBINARY, "VARBINARY" },
        { TokenTypes.IMAGE, "IMAGE" },
        { TokenTypes.DATE, "DATE" },
        { TokenTypes.DATETIME, "DATETIME" },
        { TokenTypes.SMALLDATETIME, "SMALLDATETIME" },
        { TokenTypes.DATETIME2, "DATETIME2" },
        { TokenTypes.DATETIMEOFFSET, "DATETIMEOFFSET" },
        { TokenTypes.GEOGRAPHY, "GEOGRAPHY" },
        { TokenTypes.GEOMETRY, "GEOMETRY" },
        { TokenTypes.HIERARCHYID, "HIERARCHYID" },
        { TokenTypes.SQL_VARIANT, "SQL_VARIANT" },
        { TokenTypes.TIMESTAMP, "TIMESTAMP" },
        { TokenTypes.ROWVERSION, "ROWVERSION" },
        { TokenTypes.UNIQUEIDENTIFIER, "UNIQUEIDENTIFIER" },
        { TokenTypes.FOR_XML, "FOR XML" },
        { TokenTypes.FOR_JSON, "FOR JSON" },
        { TokenTypes.OPEN_JSON, "OPENJSON" }
    };

    public static string TokenKindToString(TokenTypes tokenKind)
    {
        return TokenKindToStringMap.TryGetValue(tokenKind, out var value)
            ? value
            : tokenKind.ToString();
    }

    
}